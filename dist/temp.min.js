class LoanCalculator{constructor(){this.loans=[];this.loanCount=0;this.maxLoans=4;this.savedData=null;this.initializeElements();this.setupEventListeners();this.addInitialLoan()}initializeElements(){this.loanContainer=document.getElementById("loanContainer");this.addLoanBtn=document.getElementById("addLoanBtn");this.prepaymentSlider=document.getElementById("prepaymentSlider");this.prepaymentValue=document.getElementById("prepaymentValue");this.resultsSection=document.getElementById("resultsSection");this.resultsGrid=document.getElementById("resultsGrid");this.amortizationSection=document.getElementById("amortizationSection");this.amortizationBody=document.getElementById("amortizationBody");this.summaryContent=document.getElementById("summaryContent");this.saveBtn=document.getElementById("saveBtn");this.downloadBtn=document.getElementById("downloadBtn")}setupEventListeners(){this.addLoanBtn.addEventListener("click",(()=>this.addLoan()));this.prepaymentSlider.addEventListener("input",(e=>this.updatePrepayment(e)));this.loanContainer.addEventListener("input",(()=>this.calculateAll()));this.saveBtn.addEventListener("click",(()=>this.saveComparison()));this.downloadBtn.addEventListener("click",(()=>this.downloadCSV()))}createEnhancedPieChart(canvasId,data){const ctx=document.getElementById(canvasId);if(!ctx)return;new Chart(ctx,{type:"doughnut",data:{datasets:[{data:[data.principal,data.totalInterest],backgroundColor:["#ff6b6b","#4ecdc4"],borderWidth:0,cutout:"75%",circumference:300,rotation:-150}]},options:{responsive:true,plugins:{legend:{display:false},tooltip:{callbacks:{label:function(context){const label=context.dataIndex===0?"Principal":"Interest";const value=context.parsed;const percent=(value/(data.principal+data.totalInterest)*100).toFixed(1);return`${label}: ₹${value.toLocaleString("en-IN")} (${percent}%)`}}}},animation:{animateRotate:true,duration:1500}}})}addLoan(){if(this.loanCount>=this.maxLoans)return;this.loanCount++;const currentDate=new Date;const currentMonth=currentDate.toISOString().slice(0,7);const loanDiv=document.createElement("div");loanDiv.className="loan-section fade-in";loanDiv.innerHTML=`\n      <div class="loan-header">\n        <h3 class="loan-title">\n          <i class="fas fa-home"></i>\n          Loan ${this.loanCount}\n        </h3>\n        ${this.loanCount>1?`<button class="remove-btn" onclick="loanCalculator.removeLoan(this)"><i class="fas fa-trash"></i> Remove</button>`:""}\n      </div>\n      <div class="input-group">\n        <div class="form-field">\n          <label>Loan Amount (₹)</label>\n          <input type="number" class="loan-principal" placeholder="Enter loan amount" min="1000" step="1000">\n        </div>\n        <div class="form-field">\n          <label>Tenure (months)</label>\n          <input type="number" class="loan-tenure" placeholder="Enter tenure" min="1" max="360">\n        </div>\n        <div class="form-field">\n          <label>Interest Rate (% per annum)</label>\n          <input type="number" class="loan-rate" placeholder="Enter rate" min="0.1" max="50" step="0.01">\n        </div>\n        <div class="form-field">\n          <label>Start Date</label>\n          <input type="month" class="loan-start-date" value="${currentMonth}" />\n        </div>\n        <div class="form-field">\n          <label>View Mode</label>\n          <select class="loan-view-mode">\n            <option value="month">Month-wise</option>\n            <option value="calendar">Calendar Year</option>\n          </select>\n        </div>\n      </div>\n    `;this.loanContainer.appendChild(loanDiv);this.updateAddButton()}addInitialLoan(){this.addLoan()}removeLoan(button){const loanSection=button.closest(".loan-section");loanSection.style.transform="translateX(-100%)";loanSection.style.opacity="0";setTimeout((()=>{loanSection.remove();this.loanCount--;this.renumberLoans();this.updateAddButton();this.calculateAll()}),300)}renumberLoans(){const loanSections=this.loanContainer.querySelectorAll(".loan-section");loanSections.forEach(((section,index)=>{const title=section.querySelector(".loan-title");title.innerHTML=`<i class="fas fa-home"></i> Loan ${index+1}`}))}updateAddButton(){this.addLoanBtn.disabled=this.loanCount>=this.maxLoans;this.addLoanBtn.innerHTML=this.loanCount>=this.maxLoans?'<i class="fas fa-info-circle"></i> Maximum loans reached':'<i class="fas fa-plus"></i> Add Another Loan'}updatePrepayment(e){this.prepaymentValue.textContent=e.target.value+"%";this.calculateAll()}calculateAll(){const principals=document.querySelectorAll(".loan-principal");const tenures=document.querySelectorAll(".loan-tenure");const rates=document.querySelectorAll(".loan-rate");const prepaymentPercent=parseFloat(this.prepaymentSlider.value)/100;this.clearResults();let validLoans=0;let totalEMI=0;let totalInterest=0;let totalAmount=0;for(let i=0;i<principals.length;i++){const P=parseFloat(principals[i].value);const N=parseFloat(tenures[i].value);const R=parseFloat(rates[i].value);if(isNaN(P)||isNaN(N)||isNaN(R)||P<=0||N<=0||R<=0)continue;validLoans++;const prepayment=P*prepaymentPercent;const effectiveP=P-prepayment;const monthlyRate=R/1200;const EMI=effectiveP*monthlyRate*Math.pow(1+monthlyRate,N)/(Math.pow(1+monthlyRate,N)-1);const totalPayment=EMI*N;const totalInterestAmount=totalPayment-effectiveP;totalEMI+=EMI;totalInterest+=totalInterestAmount;totalAmount+=totalPayment;this.displayLoanResult(i+1,{emi:EMI,totalPayment:totalPayment,totalInterest:totalInterestAmount,principal:effectiveP,prepayment:prepayment,originalPrincipal:P});this.generateAmortizationSchedule(i+1,effectiveP,EMI,monthlyRate,N)}if(validLoans>0){this.displaySummary(totalEMI,totalInterest,totalAmount,validLoans);this.showResults()}else{this.hideSummary()}}displayLoanResult(loanNumber,data){const resultCard=document.createElement("div");resultCard.className="result-card fade-in";resultCard.innerHTML=`\n      <div class="result-header">\n        <h3 class="result-title">Loan ${loanNumber}</h3>\n        <div class="loan-badge">Details</div>\n      </div>\n      <div class="summary-grid">\n        <div class="metric"><div class="metric-label">Monthly EMI</div><div class="metric-value">₹${this.formatNumber(data.emi)}</div></div>\n        <div class="metric"><div class="metric-label">Total Interest</div><div class="metric-value">₹${this.formatNumber(data.totalInterest)}</div></div>\n        <div class="metric"><div class="metric-label">Total Payment</div><div class="metric-value">₹${this.formatNumber(data.totalPayment)}</div></div>\n        ${data.prepayment>0?`<div class="metric"><div class="metric-label">Prepayment Made</div><div class="metric-value">₹${this.formatNumber(data.prepayment)}</div></div>`:""}\n      </div>\n      <div class="chart-container">\n        <div class="chart-header">\n          <div class="chart-title">Payment Breakdown</div>\n          <div class="chart-subtitle">Principal vs Interest</div>\n        </div>\n        \n        <div class="donut-chart-container">\n          <canvas id="pieChartLoan${loanNumber}"></canvas>\n          <div class="chart-center-content">\n            <div class="center-label">Monthly EMI</div>\n            <div class="center-value">₹${this.formatNumber(data.emi)}</div>\n            <div class="center-sublabel">per month</div>\n          </div>\n        </div>\n        \n        <div class="chart-legend">\n          <div class="legend-item">\n            <div class="legend-color" style="background: #ff6b6b;"></div>\n            <div class="legend-text">Principal: ₹${this.formatNumber(data.principal)}</div>\n          </div>\n          <div class="legend-item">\n            <div class="legend-color" style="background: #4ecdc4;"></div>\n            <div class="legend-text">Interest: ₹${this.formatNumber(data.totalInterest)}</div>\n          </div>\n        </div>\n      </div>\n    `;this.resultsGrid.appendChild(resultCard);setTimeout((()=>{this.createEnhancedPieChart(`pieChartLoan${loanNumber}`,data)}),100)}displaySummary(totalEMI,totalInterest,totalAmount,loanCount){this.summaryContent.innerHTML=`\n      <div class="summary-grid">\n        <div class="metric"><div class="metric-label">Total Monthly EMI</div><div class="metric-value">₹${this.formatNumber(totalEMI)}</div></div>\n        <div class="metric"><div class="metric-label">Total Interest</div><div class="metric-value">₹${this.formatNumber(totalInterest)}</div></div>\n        <div class="metric"><div class="metric-label">Total Amount</div><div class="metric-value">₹${this.formatNumber(totalAmount)}</div></div>\n        <div class="metric"><div class="metric-label">Active Loans</div><div class="metric-value">${loanCount}</div></div>\n      </div>\n    `;this.drawEmiTimelineChart()}hideSummary(){this.summaryContent.innerHTML=`<div style="text-align: center; padding: 40px; color: #9ca3af;"><i class="fas fa-info-circle" style="font-size: 3rem; margin-bottom: 15px;"></i><p>Enter loan details to see your comparison</p></div>`}drawEmiTimelineChart(){const container=document.getElementById("emiTimelineChart");if(!container)return;if(this.emiTimelineChart){this.emiTimelineChart.destroy()}const ctx=container.getContext("2d");const principals=document.querySelectorAll(".loan-principal");const tenures=document.querySelectorAll(".loan-tenure");const rates=document.querySelectorAll(".loan-rate");const startDates=document.querySelectorAll(".loan-start-date");const prepaymentPercent=parseFloat(this.prepaymentSlider.value)/100;const chartColors=[["#2563eb","#60a5fa"],["#16a34a","#86efac"],["#db2777","#f9a8d4"],["#7c3aed","#c4b5fd"]];const labels=[];const allDatasets=[];for(let i=0;i<principals.length;i++){const P=parseFloat(principals[i].value);const N=parseInt(tenures[i].value);const R=parseFloat(rates[i].value);const startDate=startDates[i].value;if(!P||!N||!R||!startDate)continue;const effectiveP=P-P*prepaymentPercent;const r=R/1200;const emi=effectiveP*r*Math.pow(1+r,N)/(Math.pow(1+r,N)-1);let balance=effectiveP;const principalParts=[],interestParts=[],balances=[],dateLabels=[];const[startYear,startMonth]=startDate.split("-").map(Number);const start=new Date(startYear,startMonth-1);for(let m=0;m<N;m++){const interest=balance*r;const principalPart=emi-interest;balance=Math.max(0,balance-principalPart);const labelDate=new Date(start.getFullYear(),start.getMonth()+m);const label=labelDate.toLocaleDateString("en-GB",{month:"short",year:"numeric"});dateLabels.push(label);principalParts.push(+principalPart.toFixed(2));interestParts.push(+interest.toFixed(2));balances.push(+balance.toFixed(2))}if(labels.length<dateLabels.length){labels.length=0;labels.push(...dateLabels)}const[primary,secondary]=chartColors[i%chartColors.length];allDatasets.push({type:"bar",label:`Loan ${i+1} - Principal`,data:principalParts,backgroundColor:primary,stack:`loan${i}`,yAxisID:"y1"},{type:"bar",label:`Loan ${i+1} - Interest`,data:interestParts,backgroundColor:secondary,stack:`loan${i}`,yAxisID:"y1"},{type:"line",label:`Loan ${i+1} - Balance`,data:balances,borderColor:primary,backgroundColor:primary,borderWidth:2,pointRadius:0,fill:false,yAxisID:"y",tension:.4})}this.emiTimelineChart=new Chart(ctx,{type:"bar",data:{labels:labels,datasets:allDatasets},options:{responsive:true,interaction:{mode:"nearest",axis:"x",intersect:false},plugins:{title:{display:true,text:"EMI Timeline - Principal vs Interest vs Balance",font:{size:16}},tooltip:{mode:"index",callbacks:{label:function(context){return`${context.dataset.label}: ₹${Math.round(context.raw).toLocaleString("en-IN")}`}}},legend:{position:"bottom",labels:{boxWidth:16,usePointStyle:true}}},scales:{x:{title:{display:true,text:"Month-Year"},ticks:{maxRotation:45,minRotation:30}},y:{type:"linear",position:"left",title:{display:true,text:"Remaining Balance (₹)"},ticks:{callback:val=>"₹"+val.toLocaleString("en-IN")}},y1:{type:"linear",position:"right",title:{display:true,text:"Monthly EMI Split (₹)"},grid:{drawOnChartArea:false},stacked:true,ticks:{callback:val=>"₹"+val.toLocaleString("en-IN")}}}}})}generateAmortizationSchedule(loanNumber,principal,emi,monthlyRate,tenure){let balance=principal;let cumulativeInterest=0;const startDateInput=document.querySelectorAll(".loan-start-date")[loanNumber-1];const viewModeInput=document.querySelectorAll(".loan-view-mode")[loanNumber-1];const startDateValue=startDateInput?.value;const viewMode=viewModeInput?.value||"month";let startDate=new Date;if(startDateValue){const[year,month]=startDateValue.split("-");startDate=new Date(parseInt(year),parseInt(month)-1,1)}const scheduleContainer=document.createElement("div");scheduleContainer.className="individual-loan-schedule";scheduleContainer.innerHTML=`\n      <h3 style="margin: 20px 0 10px; font-weight: 600; color: #1e293b;">\n        Loan ${loanNumber} Amortization Schedule\n      </h3>\n      <div class="table-container">\n        <table>\n          <thead>\n            <tr>\n              <th>Month</th>\n              <th>EMI</th>\n              <th>Principal</th>\n              <th>Interest</th>\n              <th>Balance</th>\n              <th>Total Paid</th>\n              <th>Cumulative Interest</th>\n              <th>Status</th>\n            </tr>\n          </thead>\n          <tbody></tbody>\n        </table>\n      </div>\n    `;this.amortizationSection.querySelector(".card-title").insertAdjacentElement("afterend",scheduleContainer);const tbody=scheduleContainer.querySelector("tbody");for(let month=1;month<=tenure;month++){if(balance<=0)break;const interestAmount=balance*monthlyRate;const principalAmount=emi-interestAmount;balance=Math.max(0,balance-principalAmount);cumulativeInterest+=interestAmount;const status=balance<=0||month===tenure?"Completed":"Active";const statusClass=balance<=0||month===tenure?"status-completed":"status-active";let displayDate="";if(viewMode==="calendar"){const currentDate=new Date(startDate);currentDate.setMonth(currentDate.getMonth()+(month-1));displayDate=currentDate.toLocaleDateString("en-US",{month:"short",year:"numeric"})}else{displayDate=`M${month}`}const row=document.createElement("tr");row.innerHTML=`\n        <td>${displayDate}</td>\n        <td>₹${this.formatNumber(emi)}</td>\n        <td>₹${this.formatNumber(principalAmount)}</td>\n        <td>₹${this.formatNumber(interestAmount)}</td>\n        <td>₹${this.formatNumber(balance)}</td>\n        <td>₹${this.formatNumber(emi*month)}</td>\n        <td>₹${this.formatNumber(cumulativeInterest)}</td>\n        <td><span class="status-badge ${statusClass}">${status}</span></td>\n      `;tbody.appendChild(row)}}showResults(){this.resultsSection.classList.remove("hidden");this.amortizationSection.classList.remove("hidden")}clearResults(){this.resultsGrid.innerHTML="";const existingSchedules=this.amortizationSection.querySelectorAll(".individual-loan-schedule");existingSchedules.forEach((schedule=>schedule.remove()))}formatNumber(num){return new Intl.NumberFormat("en-IN",{maximumFractionDigits:0}).format(Math.round(num))}saveComparison(){const data={prepayment:this.prepaymentSlider.value,loans:Array.from(document.querySelectorAll(".loan-principal")).map(((_,i)=>({principal:document.querySelectorAll(".loan-principal")[i].value,tenure:document.querySelectorAll(".loan-tenure")[i].value,rate:document.querySelectorAll(".loan-rate")[i].value,startDate:document.querySelectorAll(".loan-start-date")[i].value,viewMode:document.querySelectorAll(".loan-view-mode")[i].value})))};this.savedData=data;const originalText=this.saveBtn.innerHTML;this.saveBtn.innerHTML='<i class="fas fa-check"></i> Saved!';this.saveBtn.style.background="#10b981";setTimeout((()=>{this.saveBtn.innerHTML=originalText;this.saveBtn.style.background=""}),2e3)}downloadCSV(){const schedules=this.amortizationSection.querySelectorAll(".individual-loan-schedule");if(schedules.length===0){alert("No data to download. Please calculate loans first.");return}let csv="Loan,Month,EMI,Principal,Interest,Balance,Total Payment,Cumulative Interest,Status\n";schedules.forEach(((schedule,loanIndex)=>{const rows=schedule.querySelectorAll("tbody tr");rows.forEach((row=>{const cells=row.querySelectorAll("td");const rowData=[`Loan ${loanIndex+1}`];Array.from(cells).forEach((cell=>{rowData.push(cell.textContent.replace(/₹|,/g,""))}));csv+=rowData.join(",")+"\n"}))}));const blob=new Blob([csv],{type:"text/csv"});const url=URL.createObjectURL(blob);const a=document.createElement("a");a.href=url;a.download=`loan_amortization_${(new Date).toISOString().split("T")[0]}.csv`;document.body.appendChild(a);a.click();document.body.removeChild(a);URL.revokeObjectURL(url)}}document.addEventListener("DOMContentLoaded",(function(){window.loanCalculator=new LoanCalculator}));