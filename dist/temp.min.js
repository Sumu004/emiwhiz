class LoanCalculator{constructor(){this.loans=[];this.loanCount=0;this.maxLoans=4;this.savedData=null;this.initializeElements();this.setupEventListeners();this.addInitialLoan()}initializeElements(){this.loanContainer=document.getElementById("loanContainer");this.addLoanBtn=document.getElementById("addLoanBtn");this.prepaymentSlider=document.getElementById("prepaymentSlider");this.prepaymentValue=document.getElementById("prepaymentValue");this.resultsSection=document.getElementById("resultsSection");this.resultsGrid=document.getElementById("resultsGrid");this.amortizationSection=document.getElementById("amortizationSection");this.amortizationBody=document.getElementById("amortizationBody");this.summaryContent=document.getElementById("summaryContent");this.saveBtn=document.getElementById("saveBtn");this.downloadBtn=document.getElementById("downloadBtn")}setupEventListeners(){this.addLoanBtn.addEventListener("click",(()=>this.addLoan()));this.prepaymentSlider.addEventListener("input",(e=>this.updatePrepayment(e)));this.loanContainer.addEventListener("input",(()=>this.calculateAll()));this.saveBtn.addEventListener("click",(()=>this.saveComparison()));this.downloadBtn.addEventListener("click",(()=>this.downloadCSV()))}addLoan(){if(this.loanCount>=this.maxLoans)return;this.loanCount++;const loanDiv=document.createElement("div");loanDiv.className="loan-section fade-in";loanDiv.innerHTML=`\n                    <div class="loan-header">\n                        <h3 class="loan-title">\n                            <i class="fas fa-home"></i>\n                            Loan ${this.loanCount}\n                        </h3>\n                        ${this.loanCount>1?`<button class="remove-btn" onclick="loanCalculator.removeLoan(this)">\n                            <i class="fas fa-trash"></i>\n                            Remove\n                        </button>`:""}\n                    </div>\n                    <div class="input-group">\n                        <div class="form-field">\n                            <label title="Enter loan amount in rupees">Loan Amount (₹)</label>\n                            <input type="number" class="loan-principal" placeholder="Enter loan amount" min="1000" step="1000">\n                        </div>\n                        <div class="form-field">\n                            <label title="Enter loan duration in months">Tenure (months)</label>\n                            <input type="number" class="loan-tenure" placeholder="Enter tenure" min="1" max="360">\n                        </div>\n                        <div class="form-field">\n                            <label title="Annual interest rate">Interest Rate (% per annum)</label>\n                            <input type="number" class="loan-rate" placeholder="Enter rate" min="0.1" max="50" step="0.01">\n                        </div>\n                    </div>\n                `;this.loanContainer.appendChild(loanDiv);this.updateAddButton()}addInitialLoan(){this.addLoan()}removeLoan(button){const loanSection=button.closest(".loan-section");loanSection.style.transform="translateX(-100%)";loanSection.style.opacity="0";setTimeout((()=>{loanSection.remove();this.loanCount--;this.renumberLoans();this.updateAddButton();this.calculateAll()}),300)}renumberLoans(){const loanSections=this.loanContainer.querySelectorAll(".loan-section");loanSections.forEach(((section,index)=>{const title=section.querySelector(".loan-title");title.innerHTML=`<i class="fas fa-home"></i> Loan ${index+1}`}))}updateAddButton(){this.addLoanBtn.disabled=this.loanCount>=this.maxLoans;if(this.loanCount>=this.maxLoans){this.addLoanBtn.innerHTML='<i class="fas fa-info-circle"></i> Maximum loans reached'}else{this.addLoanBtn.innerHTML='<i class="fas fa-plus"></i> Add Another Loan'}}updatePrepayment(e){const value=e.target.value;this.prepaymentValue.textContent=value+"%";this.calculateAll()}calculateAll(){const principals=document.querySelectorAll(".loan-principal");const tenures=document.querySelectorAll(".loan-tenure");const rates=document.querySelectorAll(".loan-rate");const prepaymentPercent=parseFloat(this.prepaymentSlider.value)/100;this.clearResults();let validLoans=0;let totalEMI=0;let totalInterest=0;let totalAmount=0;for(let i=0;i<principals.length;i++){const P=parseFloat(principals[i].value);const N=parseFloat(tenures[i].value);const R=parseFloat(rates[i].value);if(isNaN(P)||isNaN(N)||isNaN(R)||P<=0||N<=0||R<=0){continue}validLoans++;const prepayment=P*prepaymentPercent;const effectiveP=P-prepayment;const monthlyRate=R/1200;const EMI=effectiveP*monthlyRate*Math.pow(1+monthlyRate,N)/(Math.pow(1+monthlyRate,N)-1);const totalPayment=EMI*N;const totalInterestAmount=totalPayment-effectiveP;totalEMI+=EMI;totalInterest+=totalInterestAmount;totalAmount+=totalPayment;this.displayLoanResult(i+1,{emi:EMI,totalPayment:totalPayment,totalInterest:totalInterestAmount,principal:effectiveP,prepayment:prepayment,originalPrincipal:P});this.generateAmortizationSchedule(i+1,effectiveP,EMI,monthlyRate,N)}if(validLoans>0){this.displaySummary(totalEMI,totalInterest,totalAmount,validLoans);this.showResults()}else{this.hideSummary()}}displayLoanResult(loanNumber,data){const resultCard=document.createElement("div");resultCard.className="result-card fade-in";resultCard.innerHTML=`\n                    <div class="result-header">\n                        <h3 class="result-title">Loan ${loanNumber}</h3>\n                        <div class="loan-badge">Details</div>\n                    </div>\n                    <div class="metric">\n                        <div class="metric-label">Monthly EMI</div>\n                        <div class="metric-value">₹${this.formatNumber(data.emi)}</div>\n                    </div>\n                    <div class="metric">\n                        <div class="metric-label">Total Interest</div>\n                        <div class="metric-value">₹${this.formatNumber(data.totalInterest)}</div>\n                    </div>\n                    <div class="metric">\n                        <div class="metric-label">Total Payment</div>\n                        <div class="metric-value">₹${this.formatNumber(data.totalPayment)}</div>\n                    </div>\n                    ${data.prepayment>0?`\n                    <div class="metric">\n                        <div class="metric-label">Prepayment Made</div>\n                        <div class="metric-value">₹${this.formatNumber(data.prepayment)}</div>\n                    </div>\n                    `:""}\n                `;this.resultsGrid.appendChild(resultCard)}displaySummary(totalEMI,totalInterest,totalAmount,loanCount){this.summaryContent.innerHTML=`\n                    <div class="metric">\n                        <div class="metric-label">Total Monthly EMI</div>\n                        <div class="metric-value">₹${this.formatNumber(totalEMI)}</div>\n                    </div>\n                    <div class="metric">\n                        <div class="metric-label">Total Interest</div>\n                        <div class="metric-value">₹${this.formatNumber(totalInterest)}</div>\n                    </div>\n                    <div class="metric">\n                        <div class="metric-label">Total Amount</div>\n                        <div class="metric-value">₹${this.formatNumber(totalAmount)}</div>\n                    </div>\n                    <div class="metric">\n                        <div class="metric-label">Active Loans</div>\n                        <div class="metric-value">${loanCount}</div>\n                    </div>\n                `}hideSummary(){this.summaryContent.innerHTML=`\n                    <div style="text-align: center; padding: 40px; color: #9ca3af;">\n                        <i class="fas fa-info-circle" style="font-size: 3rem; margin-bottom: 15px;"></i>\n                        <p>Enter loan details to see your comparison</p>\n                    </div>\n                `}generateAmortizationSchedule(loanNumber,principal,emi,monthlyRate,tenure){let balance=principal;let cumulativeInterest=0;for(let month=1;month<=tenure;month++){if(balance<=0)break;const interestAmount=balance*monthlyRate;const principalAmount=emi-interestAmount;balance=Math.max(0,balance-principalAmount);cumulativeInterest+=interestAmount;const row=document.createElement("tr");row.innerHTML=`\n                        <td>${loanNumber}</td>\n                        <td>${month}</td>\n                        <td>₹${this.formatNumber(emi)}</td>\n                        <td>₹${this.formatNumber(principalAmount)}</td>\n                        <td>₹${this.formatNumber(interestAmount)}</td>\n                        <td>₹${this.formatNumber(balance)}</td>\n                        <td>₹${this.formatNumber(emi*month)}</td>\n                        <td>₹${this.formatNumber(cumulativeInterest)}</td>\n                    `;this.amortizationBody.appendChild(row)}}showResults(){this.resultsSection.classList.remove("hidden");this.amortizationSection.classList.remove("hidden")}clearResults(){this.resultsGrid.innerHTML="";this.amortizationBody.innerHTML=""}formatNumber(num){return new Intl.NumberFormat("en-IN",{maximumFractionDigits:0}).format(Math.round(num))}saveComparison(){const data={prepayment:this.prepaymentSlider.value,loans:Array.from(document.querySelectorAll(".loan-principal")).map(((_,i)=>({principal:document.querySelectorAll(".loan-principal")[i].value,tenure:document.querySelectorAll(".loan-tenure")[i].value,rate:document.querySelectorAll(".loan-rate")[i].value})))};this.savedData=data;const originalText=this.saveBtn.innerHTML;this.saveBtn.innerHTML='<i class="fas fa-check"></i> Saved!';this.saveBtn.style.background="#10b981";setTimeout((()=>{this.saveBtn.innerHTML=originalText;this.saveBtn.style.background=""}),2e3)}downloadCSV(){const rows=this.amortizationBody.querySelectorAll("tr");if(rows.length===0){alert("No data to download. Please calculate loans first.");return}let csv="Loan,Month,EMI,Principal,Interest,Balance,Total Payment,Cumulative Interest\n";rows.forEach((row=>{const cells=row.querySelectorAll("td");const rowData=Array.from(cells).map((cell=>cell.textContent.replace(/₹|,/g,"")));csv+=rowData.join(",")+"\n"}));const blob=new Blob([csv],{type:"text/csv"});const url=URL.createObjectURL(blob);const a=document.createElement("a");a.href=url;a.download=`loan_amortization_${(new Date).toISOString().split("T")[0]}.csv`;document.body.appendChild(a);a.click();document.body.removeChild(a);URL.revokeObjectURL(url)}}document.addEventListener("DOMContentLoaded",(function(){window.loanCalculator=new LoanCalculator}));